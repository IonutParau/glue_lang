(global-macro field (
  ; @args[0] -> variable
  ; @args[1] -> field name as variable
  (if-else (= (list-size @args) 3)
    ["expression" ["var" "table-set"] [(list-get @args 0) ["string" (list-get (list-get @args 1) 1)] (list-get @args 2)]]
    ["expression" ["var" "table-get"] [(list-get @args 0) ["string" (list-get (list-get @args 1) 1)]]]
  )
))

(print (field {"x" 5 "y" 6} x))
(print (field {"x" 5 "y" 6} x 15))

; It takes a Struct name, and the struct elements.
; It is really simple
(global-macro struct (
  ; @args[0] -> Struct name
  ; @args[1] -> Struct fields
  (var structName (list-get @args 0))
  (var structParts (list-get @args 1))

  (var structFuncBody {})

  (var structArgs (list-get structParts 1))

  (for-each structArgs [i field] (
    (var structFuncBody (table-set structFuncBody ["string" (list-get field 1)] field))
  ))

  ["expression" ["var" "global-fn"] [structName structParts ["table" structFuncBody]]]
))

(struct MyStruct [x y z])